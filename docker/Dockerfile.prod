# 使用 Node.js 18 作为基础镜像
FROM node:18-alpine AS base

# 更新 apk 包管理器并安装 ca-certificates 和 Python
RUN apk update && apk add ca-certificates python3 python3-dev build-base && \
    update-ca-certificates && \
    python3 -m venv /opt/venv && \
    /opt/venv/bin/pip install setuptools

# 设置DNS服务器
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf && \
    echo "nameserver 223.5.5.5" >> /etc/resolv.conf && \
    echo "nameserver 223.6.6.6" >> /etc/resolv.conf

# 设置 Python 虚拟环境
ENV PATH="/opt/venv/bin:$PATH"
ENV VIRTUAL_ENV="/opt/venv"

# 安装 pnpm
RUN npm install -g pnpm --registry https://registry.npmmirror.com

# 设置工作目录
WORKDIR /app

# 复制 package.json 和 pnpm-lock.yaml
COPY package.json pnpm-lock.yaml ./

# 设置 pnpm 镜像源和超时
RUN pnpm config set registry https://registry.npmmirror.com && \
    pnpm config set fetch-timeout 600000 && \
    pnpm config set fetch-retry-maxtimeout 600000

# 安装依赖（使用预构建的二进制文件）
RUN pnpm config set sqlite3_binary_host_mirror https://npmmirror.com/mirrors/sqlite3/ && \
    pnpm config set electron_mirror https://npmmirror.com/mirrors/electron/ && \
    CFLAGS="-Wno-implicit-fallthrough -Wno-stringop-overread" pnpm install --frozen-lockfile

# 复制源代码
COPY . .

# 构建应用
RUN pnpm web:build

# 生产环境
FROM nginx:alpine AS production

# 复制构建产物到 nginx 默认目录
COPY --from=base /app/dist-web /usr/share/nginx/html

# 复制 nginx 配置文件
COPY docker/nginx.conf /etc/nginx/nginx.conf

# 暴露端口
EXPOSE 80

# 启动 nginx
CMD ["nginx", "-g", "daemon off;"]